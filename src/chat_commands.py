"""–§–∞–π–ª —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è —á–∞—Ç–∞/–∫–ª–∞–Ω–∞."""
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from sqlalchemy import and_

from src import UpdateTimeChangeClanTask, form_router
from tables.clans import Clans


async def get_clan(message: Message) -> tuple[str, int, Clans]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–Ω–∞."""
    chat_id = str(message.chat.id)
    thread_id = (
        message.message_thread_id
        if message.chat.is_forum and message.message_thread_id is not None
        else 0
    )
    clan = await Clans.query.where(
        and_(Clans.chat_id == chat_id, Clans.thread_id == thread_id)
    ).gino.first()
    return chat_id, thread_id, clan


async def chat_start(message: Message) -> None:
    """–ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–µ."""
    chat_id, thread_id, clan = await get_clan(message)
    if clan:
        if clan.start:
            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {clan.name_clan}!",
            )
        else:
            await clan.update(start=True).apply()
            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {clan.name_clan}!\n–Ø —Å–Ω–æ–≤–∞ —Å –≤–∞–º–∏!üòà",
            )
    else:
        await Clans(
            chat_id=chat_id, name_clan=message.chat.title, thread_id=thread_id
        ).create()
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –õ—é—Ü–∏–∫!")


@form_router.message(Command("stop"))
async def stop(message: Message) -> None:
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–µ."""
    if message.chat.type != "private":
        _, _, clan = await get_clan(message)

        if clan and clan.start:
            await clan.update(start=False).apply()
            await message.answer("–û–∫, —è –≤—Å–µ –ø–æ–Ω—è–ª!‚òπÔ∏è\n–Ø –ø–æ—à–µ–ª...")
            return
        await message.answer("–ê —á—Ç–æ —è? –Ø –º–æ–ª—á—É!‚òπÔ∏è")


@form_router.message(UpdateTimeChangeClanTask.hour)
async def add_hour_for_change_clan_task(
    message: Message, state: FSMContext
) -> None:
    """–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã –ö–ó –≤ —á–∞—Ç–µ."""
    if (await state.get_data())["user_id"] != message.from_user.id:
        return
    if message.text and message.text.isnumeric():
        hour = int(message.text)
        if 1 <= hour <= 24:
            chat_id, thread_id, clan = await get_clan(message)
            if clan:
                await clan.update(time_kz=hour).apply()
            else:
                await Clans(
                    chat_id=chat_id,
                    name_clan=message.chat.title,
                    thread_id=thread_id,
                    time_kz=hour,
                    start=False,
                ).create()
            await message.answer("–í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            await state.clear()
        else:
            await message.answer("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –ø–æ –º–æ—Å–∫–≤–µ!")
    else:
        await message.answer("–í–≤–æ–¥–∏ —Ü–∏—Ñ—Ä–∞–º–∏")


@form_router.message(Command("update_time_change_clan_task"))
async def update_time_change_clan_task(
    message: Message, state: FSMContext
) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã –ö–ó –≤ —á–∞—Ç–µ."""
    if message.chat.type != "private":
        await state.update_data(user_id=message.from_user.id)
        await state.set_state(UpdateTimeChangeClanTask.hour)
        await delete_message(message)
        await message.answer(
            '–í–æ —Å–∫–æ–ª—å–∫–æ –ø–æ –º–æ—Å–∫–≤–µ —Å–º–µ–Ω–∞ –ö–ó? –í–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ —á–∞—Å.\n –ü—Ä–∏–º–µ—Ä: "18"'
        )


async def remind(message: Message, remain_zero_rock: bool) -> None:
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–±–Ω—É–ª–µ–Ω–∏–µ –∫–∞–º–Ω–µ–π."""
    _, _, clan = await get_clan(message)
    if clan and message.chat.type != "private":
        await clan.update(remain_zero_rock=remain_zero_rock).apply()
        await delete_message(message)
        if remain_zero_rock:
            await message.answer(
                "–û–∫, —è –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –∑–∞ —á–∞—Å, –æ —Ç–æ–º —á—Ç–æ –±—É–¥–µ—Ç –æ–±–Ω—É–ª–µ–Ω–∏–µ –∫–∞–º–Ω–µ–π."
            )
        else:
            await message.answer("–ù–µ —Ö–æ—Ç–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ!üòù")


@form_router.message(Command("start_remind"))
async def start_remind(message: Message) -> None:
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–±–Ω—É–ª–µ–Ω–∏–∏ –∫–∞–º–Ω–µ–π."""
    await remind(message, remain_zero_rock=True)


@form_router.message(Command("stop_remind"))
async def stop_remind(message: Message) -> None:
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–±–Ω—É–ª–µ–Ω–∏–∏ –∫–∞–º–Ω–µ–π."""
    await remind(message, remain_zero_rock=False)


async def delete_message(message: Message) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ."""
    try:
        await message.delete()
    except TelegramBadRequest:
        await message.answer(
            "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –î–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞, –∏–Ω–∞—á–µ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–º–æ–≥—É –¥–µ–ª–∞—Ç—å..."
        )
