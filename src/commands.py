from aiogram.exceptions import TelegramBadRequest

from src import form_router, Regisration

from aiogram.filters import CommandStart
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
)

from buttons import new_button
from tables.clans import Clans

from tables.heroes_of_users import HeroesOfUsers
from tables.telegram_users import User

@form_router.message(CommandStart())
async def start(message: Message, state: FSMContext) -> None:
    if message.chat.type == "private":
        if message.from_user is not None:
            user_id: int = int(message.from_user.id)
            if user := await User.query.where(
                User.user_id == user_id
            ).gino.first():
                if hero_user_search := await HeroesOfUsers.query.where(
                    HeroesOfUsers.user_id == user.id
                ).gino.first():
                    sms = f"–ü—Ä–∏–≤–µ—Ç, {str(hero_user_search.name)}"
                    await new_button(message, sms)
                    return
                # user(message, sms)
            else:
                user = await User(
                    user_id=user_id,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name,
                    username=message.from_user.username,
                    language_code=message.from_user.language_code,
                ).create()
                await message.answer(
                    "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–º–Ω—é. –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫–æ–π —É —Ç–µ–±—è –Ω–∏–∫ –≤ –∏–≥—Ä–µ?"
                )
            await state.update_data(user_id=user.id)
            await state.set_state(Regisration.name)
    else:
        chat_id: str = str(message.chat.id)
        if clan := await Clans.query.where(
                Clans.chat_id == chat_id
        ).gino.first():
            if clan.start:
                await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {clan.name_clan}!",
                )
            else:
                await clan.update(start=True).apply()
                await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {clan.name_clan}!\n–Ø —Å–Ω–æ–≤–∞ —Å –≤–∞–º–∏!üòà",
                )
        else:
            await Clans(
                chat_id=chat_id,
                name_clan=message.chat.title,
            ).create()
            await message.answer("–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –õ—é—Ü–∏–∫!"
            )


@form_router.message(Command('stop'))
async def stop(message: Message) -> None:
    if message.chat.type != "private":
        chat_id: str = str(message.chat.id)
        if clan := await Clans.query.where(
            Clans.chat_id == chat_id
        ).gino.first():
            if clan.start:
                await clan.update(start = False).apply()
                await message.answer("–û–∫, —è –≤—Å–µ –ø–æ–Ω—è–ª!‚òπÔ∏è\n–Ø –ø–æ—à–µ–ª...")
                return
        await message.answer("–ê —á—Ç–æ —è? –Ø –º–æ–ª—á—É!‚òπÔ∏è")



async def remind(message: Message, remain_zero_rock: bool) -> None:
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–±–Ω—É–ª–µ–Ω–∏–µ –∫–∞–º–Ω–µ–π."""
    if message.chat.type != "private":
        chat_id: str = str(message.chat.id)
        clan = await Clans.query.where(
                Clans.chat_id == chat_id
        ).gino.first()
        await clan.update(remain_zero_rock=remain_zero_rock).apply()
        try:
            await message.delete()
        except TelegramBadRequest:
            await message.answer(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –î–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞, –∏–Ω–∞—á–µ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–º–æ–≥—É –¥–µ–ª–∞—Ç—å..."
            )
        if remain_zero_rock:
            await message.answer(
                "–û–∫, —è –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –∑–∞ —á–∞—Å, –æ —Ç–æ–º —á—Ç–æ –±—É–¥–µ—Ç –æ–±–Ω—É–ª–µ–Ω–∏–µ –∫–∞–º–Ω–µ–π."
            )
        else:
            await message.answer("–ù–µ —Ö–æ—Ç–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ!üòù")


@form_router.message(Command('start_remind'))
async def start_remind(message: Message) -> None:
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–±–Ω—É–ª–µ–Ω–∏–∏ –∫–∞–º–Ω–µ–π."""
    await remind(message, remain_zero_rock=True)


@form_router.message(Command('stop_remind'))
async def stop_remind(message: Message) -> None:
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–±–Ω—É–ª–µ–Ω–∏–∏ –∫–∞–º–Ω–µ–π."""
    await remind(message, remain_zero_rock=False)
